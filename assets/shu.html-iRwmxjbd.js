import{_ as s,c as a,a as p,o as e}from"./app-BDAgxtHV.js";const t="/assets/20240425-163325590-kzk9WmcG.png",l="/assets/20240425-163331219-DeDYnsr3.png",o="/assets/20240425-163340822-DSKMNiXx.png",c="/assets/20240425-163347809-Df6IZxeA.png",i="/assets/20240425-163354351-N4yDriPA.png",u="/assets/20240425-163404549-D_NAlOxD.png",r="/assets/20240425-163411723-CZvChKwV.png",d="/assets/20240425-163417854-B4lu7ZX6.png",k="/assets/20240425-163425231-C2uOyZUr.png",v="/assets/20240425-163431806-CAGWJe7M.png",m="/assets/20240425-163438925-CLkpAiwd.png",b="/assets/20240425-163450005-BE1_gTJB.png",h="/assets/20240425-163456814-D1vr4dPU.png",g={};function f(y,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="树" tabindex="-1"><a class="header-anchor" href="#树"><span>树</span></a></h1><h2 id="一、树的四种遍历" tabindex="-1"><a class="header-anchor" href="#一、树的四种遍历"><span>一、树的四种遍历</span></a></h2><p>深度优先遍历（DFS）：前序（DLR）、中序（LDR）、后序（LRD）</p><p>广度优先遍历（BFS）：层序遍历</p><p>节点的定义：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> treeNode <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	val    <span class="token builtin">int</span></span>
<span class="line">	left   <span class="token operator">*</span>treeNode</span>
<span class="line">	right  <span class="token operator">*</span>treeNode</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="前序" tabindex="-1"><a class="header-anchor" href="#前序"><span>前序</span></a></h3><p>递归实现</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 前序遍历: 访问根节点，以前序遍历的方式访问左节点，以前序遍历的方式访问右节点  </span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">pOrder</span><span class="token punctuation">(</span>root <span class="token operator">*</span>treeNode<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// end  </span></span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">pOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token function">pOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token keyword">return</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非递归实现</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">pOrderStack</span><span class="token punctuation">(</span>root <span class="token operator">*</span>treeNode<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> st <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>treeNode  </span>
<span class="line">    st <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> root<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token keyword">var</span> pnt <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>  </span>
<span class="line">    <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token comment">// 出栈，访问节点</span></span>
<span class="line">        cur <span class="token operator">:=</span> st<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  </span>
<span class="line">        st <span class="token operator">=</span> st<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  </span>
<span class="line">        pnt <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>pnt<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  </span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 右节点入栈（存在的话）</span></span>
<span class="line">        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">            st <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token comment">// 左节点入栈</span></span>
<span class="line">        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">            st <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pnt<span class="token punctuation">)</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="中序" tabindex="-1"><a class="header-anchor" href="#中序"><span>中序</span></a></h3><p>递归实现</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 按中序遍历访问左节点，访问节点元素，按中序遍历访问右节点  </span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">ldrOrder</span><span class="token punctuation">(</span>root <span class="token operator">*</span>treeNode<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token function">ldrOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>  </span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token function">ldrOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非递归实现</p><ol><li>从根节点开始入栈，一直往左，直到最左叶子节点</li><li>出栈，访问节点</li><li>将右节点当作步骤1的根节点（若存在）</li></ol><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 代码优化</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">ldrOrderStack2</span><span class="token punctuation">(</span>root <span class="token operator">*</span>treeNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> st <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>treeNode  </span>
<span class="line">    <span class="token comment">// 出栈，访问元素  </span></span>
<span class="line">    <span class="token comment">// 如果存在右节点，继续入栈，直到最左叶子节点  </span></span>
<span class="line">    <span class="token keyword">var</span> pnt <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>  </span>
<span class="line">    tmp <span class="token operator">:=</span> root  </span>
<span class="line">    <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> tmp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token comment">// 入栈直到最左节点  </span></span>
<span class="line">        <span class="token keyword">for</span> tmp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">            st <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span>  </span>
<span class="line">            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>left  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 出栈，访问节点元素  </span></span>
<span class="line">        tmp <span class="token operator">=</span> st<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  </span>
<span class="line">        st <span class="token operator">=</span> st<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  </span>
<span class="line">        pnt <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>pnt<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token comment">// 继续找右节点的最左叶子节点  </span></span>
<span class="line">        tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>right  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="后序" tabindex="-1"><a class="header-anchor" href="#后序"><span>后序</span></a></h3><p>递归实现</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">lrdOrder</span><span class="token punctuation">(</span>root <span class="token operator">*</span>treeNode<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token function">lrdOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token function">lrdOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  </span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非递归实现</p><ol><li>从根节点开始入栈，直到最左节点</li><li><strong>获取</strong>栈顶，判断右节点 <ul><li>右节点不存在：访问该节点，<strong>出栈</strong></li><li>右节点已经访问过：访问该节点，<strong>出栈</strong></li><li>右节点未访问，进入步骤3</li></ul></li><li>将该右节点当作步骤1的根节点</li></ol><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">lrdOrderStack</span><span class="token punctuation">(</span>root <span class="token operator">*</span>treeNode<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">var</span> st <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>treeNode  </span>
<span class="line">    tmpRoot <span class="token operator">:=</span> root  </span>
<span class="line">    pre <span class="token operator">:=</span> root  </span>
<span class="line">    <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> tmpRoot <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">for</span> tmpRoot <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">            st <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> tmpRoot<span class="token punctuation">)</span>  </span>
<span class="line">            tmpRoot <span class="token operator">=</span> tmpRoot<span class="token punctuation">.</span>left  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">        tmpRoot <span class="token operator">=</span> st<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  </span>
<span class="line">        <span class="token comment">// 当节点右节点为空 或者 右子树已经访问过的情况下，访问根节点  </span></span>
<span class="line">        <span class="token keyword">if</span> tmpRoot<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> tmpRoot<span class="token punctuation">.</span>right <span class="token operator">==</span> pre <span class="token punctuation">{</span>  </span>
<span class="line">            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> tmpRoot<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  </span>
<span class="line">            pre <span class="token operator">=</span> tmpRoot  </span>
<span class="line">            tmpRoot <span class="token operator">=</span> <span class="token boolean">nil</span>  <span class="token comment">// 将当前节点标记为空，避免下一个循环又将该节点入栈  </span></span>
<span class="line">            st <span class="token operator">=</span> st<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  </span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token comment">// 右节点还没访问，后序遍历右节点  </span></span>
<span class="line">            tmpRoot <span class="token operator">=</span> tmpRoot<span class="token punctuation">.</span>right  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">return</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="层序" tabindex="-1"><a class="header-anchor" href="#层序"><span>层序</span></a></h3><p>层序遍历使用<strong>队列</strong>实现：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>root <span class="token operator">*</span>treeNode<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">	<span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">		<span class="token keyword">return</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token keyword">var</span> queue <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>treeNode  </span>
<span class="line">	queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> root<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>  </span>
<span class="line">		cur <span class="token operator">:=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  </span>
<span class="line">		queue <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  </span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  </span>
<span class="line">	</span>
<span class="line">		<span class="token keyword">if</span> cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">			queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>  </span>
<span class="line">		<span class="token punctuation">}</span>  </span>
<span class="line">		<span class="token keyword">if</span> cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">			queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  </span>
<span class="line">		<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token keyword">return</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四种遍历的时间、空间复杂度" tabindex="-1"><a class="header-anchor" href="#四种遍历的时间、空间复杂度"><span>四种遍历的时间、空间复杂度</span></a></h3><table><thead><tr><th>遍历</th><th>时间复杂度</th><th>空间复杂度</th></tr></thead><tbody><tr><td>先序</td><td>O(n)<br>递归调用的时间复杂度为O(1)，递归调用的次数为数中节点的数量n</td><td>栈实现的空间复杂度为：O(h)<br>h为数的高度<br>在较差的情况下，h = n；如果是平衡二叉树，h = logn</td></tr><tr><td>中序</td><td>O(n)</td><td>同上</td></tr><tr><td>后序</td><td>O(n)</td><td>同上</td></tr><tr><td>层序</td><td>O(n)</td><td>O(w)<br>w 为树的宽度</td></tr></tbody></table><h3 id="一些常见问题" tabindex="-1"><a class="header-anchor" href="#一些常见问题"><span>一些常见问题</span></a></h3><h4 id="判断子树" tabindex="-1"><a class="header-anchor" href="#判断子树"><span>判断子树</span></a></h4><p><strong>思路1</strong>. 递归</p><p>子问题是：判断左右子树是否会等于预期的子树（判断左右子树是否相等的问题也可以递归来实现）</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 判断根节点为起始的树与目标树是否相同  </span></span>
<span class="line"><span class="token comment">// 如果不相同，递归判断左子树和右子树  </span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span> subRoot <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> subRoot <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">if</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> subRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> subRoot<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> subRoot<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span> q <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> p <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">if</span> p <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> q <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">if</span> p<span class="token punctuation">.</span>Val <span class="token operator">!=</span> q<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span>  </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> q<span class="token punctuation">.</span>Left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> q<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路2</strong>. dfs（先序） + kmp</p><p>设主树s，子树t，主树的先序序列 ss，子树的先序序列 tt</p><p>利用先序序列的性质：</p><p>如果A.【 t 是 s 的子树】 那么B.【ss 中 包含 tt】</p><p>可以知道 B 是 A 的必要条件，是没有办法从 B 推出 A 的，原因是什么呢，假设主树：[4, 5]，子树：[4, nil, 5]，这种情况下的先序序列都是 4 5，但是两颗树是不一样的</p><p>但是我们可以通过补充两个代表空的左右节点来解决这个问题</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 通过树的先序遍历  </span></span>
<span class="line"><span class="token comment">// 补充树的每个节点，让度为2，输出树的先序遍历  </span></span>
<span class="line"><span class="token comment">// 判断主树的序列包含子树的序列  </span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">isSubtree2</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span> subRoot <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  </span>
<span class="line">    nums1 <span class="token operator">:=</span> <span class="token function">dlrNums</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  </span>
<span class="line">    nums2 <span class="token operator">:=</span> <span class="token function">dlrNums</span><span class="token punctuation">(</span>subRoot<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">kmpSearch</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> lrNilVal <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10001</span>  </span>
<span class="line"><span class="token keyword">var</span> leftNilNode <span class="token operator">=</span> TreeNode<span class="token punctuation">{</span>  </span>
<span class="line">    Val<span class="token punctuation">:</span> lrNilVal<span class="token punctuation">,</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token keyword">var</span> rightNilNode <span class="token operator">=</span> TreeNode<span class="token punctuation">{</span>  </span>
<span class="line">    Val<span class="token punctuation">:</span> lrNilVal<span class="token punctuation">,</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">dlrNums</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">var</span> nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>  </span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> nums  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> st <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>TreeNode  </span>
<span class="line">    st <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> root<span class="token punctuation">)</span>  </span>
<span class="line">    tmpRoot <span class="token operator">:=</span> root  </span>
<span class="line">    <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token comment">// pop  </span></span>
<span class="line">        tmpRoot <span class="token operator">=</span> st<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  </span>
<span class="line">        st <span class="token operator">=</span> st<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  </span>
<span class="line">        <span class="token comment">// visit  </span></span>
<span class="line">        nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> tmpRoot<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token keyword">if</span> tmpRoot<span class="token punctuation">.</span>Val <span class="token operator">!=</span> lrNilVal <span class="token operator">&amp;&amp;</span> tmpRoot<span class="token punctuation">.</span>Left <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">            tmpRoot<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token operator">&amp;</span>leftNilNode  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token keyword">if</span> tmpRoot<span class="token punctuation">.</span>Val <span class="token operator">!=</span> lrNilVal <span class="token operator">&amp;&amp;</span> tmpRoot<span class="token punctuation">.</span>Right <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">            tmpRoot<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token operator">&amp;</span>rightNilNode  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">if</span> tmpRoot<span class="token punctuation">.</span>Right <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">            st <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> tmpRoot<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token keyword">if</span> tmpRoot<span class="token punctuation">.</span>Left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">            st <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> tmpRoot<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">return</span> nums  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token comment">// i  </span></span>
<span class="line"><span class="token comment">//     nums a a  b  a  a  b  a  a  c  </span></span>
<span class="line"><span class="token comment">// pat  </span></span>
<span class="line"><span class="token comment">// j  </span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">kmpSearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pat <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  </span>
<span class="line">    next <span class="token operator">:=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span>  </span>
<span class="line">    j <span class="token operator">:=</span> <span class="token number">0</span>  </span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>  </span>
<span class="line">            j<span class="token operator">++</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> j <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span>  <span class="token function">getNext</span><span class="token punctuation">(</span>pat <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>  </span>
<span class="line">    next <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">)</span>  </span>
<span class="line">    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> l<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">for</span> l <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pat<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>l <span class="token operator">=</span> next<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">if</span> pat<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>  </span>
<span class="line">            l<span class="token operator">++</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> l  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">return</span> next  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>判断子树可以通过<strong>补充空子树</strong>，然后使用<strong>先序序列</strong>来判断</p></blockquote><h4 id="是否存在路径和为-sum" tabindex="-1"><a class="header-anchor" href="#是否存在路径和为-sum"><span>是否存在路径和为 sum</span></a></h4><p>思路：递归</p><p>原问题：是否存在从当前节点（根节点）到叶子节点的路径，和为 sum 子问题：是否存在从当前节点（根节点的子节点）到叶子节点的路径，和为 sum - val（父节点的值）</p><p>结束条件：当前节点为叶子节点</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span> targetSum <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">havePathToLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">havePathToLeaf</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span> tgtSum <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// end  </span></span>
<span class="line">    <span class="token keyword">if</span> root<span class="token punctuation">.</span>Left <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>Right <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> root<span class="token punctuation">.</span>Val <span class="token operator">==</span> tgtSum  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    have1<span class="token punctuation">,</span> have2 <span class="token operator">:=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span>  </span>
<span class="line">    <span class="token keyword">if</span> root<span class="token punctuation">.</span>Left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        have1 <span class="token operator">=</span> <span class="token function">havePathToLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> tgtSum <span class="token operator">-</span> root<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">if</span> root<span class="token punctuation">.</span>Right <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        have2 <span class="token operator">=</span> <span class="token function">havePathToLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> tgtSum <span class="token operator">-</span> root<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> have1 <span class="token operator">||</span> have2  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二、二叉搜索树"><span>二、二叉搜索树</span></a></h2><p>二叉搜索树：<code>左子树所有节点的值</code> &lt; <code>根节点</code> &lt; <code>右子树所有节点的值</code></p><h3 id="添加节点" tabindex="-1"><a class="header-anchor" href="#添加节点"><span>添加节点</span></a></h3><p>递归实现</p><p>转化成 <code>递归插入左子树或者右子树</code> 即可</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>TreeNode <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&amp;</span>TreeNode<span class="token punctuation">{</span>  </span>
<span class="line">            Val<span class="token punctuation">:</span> val<span class="token punctuation">,</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>  </span>
<span class="line">        root<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">        root<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">return</span> root  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非递归实现</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">insertIntoBST2</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>TreeNode <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&amp;</span>TreeNode<span class="token punctuation">{</span>  </span>
<span class="line">            Val<span class="token punctuation">:</span> val<span class="token punctuation">,</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    </span>
<span class="line">    pre <span class="token operator">:=</span> root  </span>
<span class="line">    tmpRoot <span class="token operator">:=</span> root  </span>
<span class="line">    <span class="token keyword">for</span> tmpRoot <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">if</span> val <span class="token operator">&lt;</span> tmpRoot<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>  </span>
<span class="line">            pre <span class="token operator">=</span> tmpRoot  </span>
<span class="line">            tmpRoot <span class="token operator">=</span> tmpRoot<span class="token punctuation">.</span>Left  </span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">            pre <span class="token operator">=</span> tmpRoot  </span>
<span class="line">            tmpRoot <span class="token operator">=</span> tmpRoot<span class="token punctuation">.</span>Right  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    newNode <span class="token operator">:=</span> <span class="token operator">&amp;</span>TreeNode<span class="token punctuation">{</span>Val<span class="token punctuation">:</span> val<span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">if</span> val <span class="token operator">&lt;</span> pre<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>  </span>
<span class="line">        pre<span class="token punctuation">.</span>Left <span class="token operator">=</span> newNode  </span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">        pre<span class="token punctuation">.</span>Right <span class="token operator">=</span> newNode  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">return</span> root  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点"><span>删除节点</span></a></h3><p>根据待删除节点的子树数量分为三种情况讨论：</p><ul><li>没有子树</li><li>一棵子树</li><li>两棵子树</li></ul><h4 id="先给出具体实现" tabindex="-1"><a class="header-anchor" href="#先给出具体实现"><span>先给出具体实现</span></a></h4><p>实现1.嫁接</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// delete 使用「嫁接」的方式来删除</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>bst <span class="token operator">*</span>binarySearchTree<span class="token punctuation">)</span> <span class="token function">delete</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span></span>
<span class="line">    tgt <span class="token operator">:=</span> bst<span class="token punctuation">.</span>root</span>
<span class="line">    <span class="token keyword">if</span> tgt <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> parent <span class="token operator">*</span>treeNode <span class="token operator">=</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token keyword">for</span> tgt <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 找到目标节点（待删除节点）</span></span>
<span class="line">        <span class="token keyword">if</span> tgt<span class="token punctuation">.</span>val <span class="token operator">==</span> val <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        parent <span class="token operator">=</span> tgt</span>
<span class="line">        <span class="token keyword">if</span> val <span class="token operator">&lt;</span> tgt<span class="token punctuation">.</span>val <span class="token punctuation">{</span></span>
<span class="line">            tgt <span class="token operator">=</span> tgt<span class="token punctuation">.</span>left</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            tgt <span class="token operator">=</span> tgt<span class="token punctuation">.</span>right</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 不存在</span></span>
<span class="line">    <span class="token keyword">if</span> tgt <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 不存在子树或者只有一棵子树的情况</span></span>
<span class="line">    <span class="token comment">// - 若存在子树，则使用子树代替待删除节点即可</span></span>
<span class="line">    <span class="token comment">// - 否则直接将待删除节点删除</span></span>
<span class="line">    <span class="token keyword">if</span> tgt<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> tgt<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> tgt<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            tgt <span class="token operator">=</span> tgt<span class="token punctuation">.</span>left</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            tgt <span class="token operator">=</span> tgt<span class="token punctuation">.</span>right</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 存在两棵子树的情况</span></span>
<span class="line">    <span class="token comment">// child 为右节点根节点</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        tmp <span class="token operator">:=</span> tgt<span class="token punctuation">.</span>right</span>
<span class="line">        <span class="token comment">// 将待删除节点的左子树嫁接到右子树的最左节点</span></span>
<span class="line">        <span class="token keyword">for</span> tmp<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>left</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        tmp<span class="token punctuation">.</span>left <span class="token operator">=</span> tgt<span class="token punctuation">.</span>left</span>
<span class="line"></span>
<span class="line">        tgt <span class="token operator">=</span> tgt<span class="token punctuation">.</span>right</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> parent <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        bst<span class="token punctuation">.</span>root <span class="token operator">=</span> tgt</span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> parent<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">==</span> val <span class="token punctuation">{</span></span>
<span class="line">        parent<span class="token punctuation">.</span>left <span class="token operator">=</span> tgt</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        parent<span class="token punctuation">.</span>right <span class="token operator">=</span> tgt</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现2.后继节点</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>bst <span class="token operator">*</span>binarySearchTree<span class="token punctuation">)</span> <span class="token function">delete</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cur <span class="token operator">:=</span> bst<span class="token punctuation">.</span>root</span>
<span class="line">    <span class="token comment">// 若树为空，直接提前返回</span></span>
<span class="line">    <span class="token keyword">if</span> cur <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 待删除节点之前的节点位置</span></span>
<span class="line">    <span class="token keyword">var</span> pre <span class="token operator">*</span>treeNode <span class="token operator">=</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token comment">// 循环查找，越过叶节点后跳出</span></span>
<span class="line">    <span class="token keyword">for</span> cur <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">==</span> num <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        pre <span class="token operator">=</span> cur</span>
<span class="line">        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> num <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 待删除节点在右子树中</span></span>
<span class="line">            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 待删除节点在左子树中</span></span>
<span class="line">            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 若无待删除节点，则直接返回</span></span>
<span class="line">    <span class="token keyword">if</span> cur <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 子节点数为 0 或 1</span></span>
<span class="line">    <span class="token keyword">if</span> cur<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> cur<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> child <span class="token operator">*</span>treeNode <span class="token operator">=</span> <span class="token boolean">nil</span></span>
<span class="line">        <span class="token comment">// 取出待删除节点的子节点</span></span>
<span class="line">        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            child <span class="token operator">=</span> cur<span class="token punctuation">.</span>left</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            child <span class="token operator">=</span> cur<span class="token punctuation">.</span>right</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 将子节点替换为待删除节点</span></span>
<span class="line">        <span class="token keyword">if</span> pre<span class="token punctuation">.</span>left <span class="token operator">==</span> cur <span class="token punctuation">{</span></span>
<span class="line">            pre<span class="token punctuation">.</span>left <span class="token operator">=</span> child</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            pre<span class="token punctuation">.</span>right <span class="token operator">=</span> child</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 子节点数为 2</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取中序遍历中待删除节点 cur 的下一个节点</span></span>
<span class="line">        tmp <span class="token operator">:=</span> cur<span class="token punctuation">.</span>right</span>
<span class="line">        <span class="token keyword">for</span> tmp<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>left</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 递归删除节点 tmp</span></span>
<span class="line">        bst<span class="token punctuation">.</span><span class="token function">remove2</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>val<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 用 tmp 覆盖 cur</span></span>
<span class="line">        cur<span class="token punctuation">.</span>val <span class="token operator">=</span> tmp<span class="token punctuation">.</span>val</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="子树数量-0" tabindex="-1"><a class="header-anchor" href="#子树数量-0"><span>子树数量 = 0</span></a></h4><p><img src="`+t+'" alt="图 0"></p><h4 id="子树数量-1" tabindex="-1"><a class="header-anchor" href="#子树数量-1"><span>子树数量 = 1</span></a></h4><p><img src="'+l+'" alt="图 1"></p><h4 id="子树数量-2" tabindex="-1"><a class="header-anchor" href="#子树数量-2"><span>子树数量 = 2</span></a></h4><ul><li>step 1</li></ul><p>找到目标节点</p><p><img src="'+o+'" alt="图 2"></p><ul><li>step 2</li></ul><p>将 <code>目标节点的字数数量变成 1</code> （有多种不同的实现方式，这里使用的是嫁接的方式）</p><p><img src="'+c+'" alt="图 3"></p><ul><li>step 3</li></ul><p>经过第二步的处理之后，就变成了子树数量 = 1 的情况</p><p><img src="'+i+`" alt="图 4"></p><p><strong>总结：</strong></p><table><thead><tr><th>子树数量</th><th>操作</th></tr></thead><tbody><tr><td>0</td><td>直接删除</td></tr><tr><td>1</td><td>子树代替目标节点</td></tr><tr><td>2</td><td>重新构建子树，使其只有一颗子树，然后使用上面方法</td></tr></tbody></table><h3 id="构建" tabindex="-1"><a class="header-anchor" href="#构建"><span>构建</span></a></h3><h3 id="判断是否是二叉搜索树" tabindex="-1"><a class="header-anchor" href="#判断是否是二叉搜索树"><span>判断是否是二叉搜索树</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 从二叉搜索树当前节点的值可以推出左右节点的取值区间，递归判断每个节点即可</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">jud</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> math<span class="token punctuation">.</span>MinInt<span class="token punctuation">,</span> math<span class="token punctuation">.</span>MaxInt<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">func</span> <span class="token function">jud</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> root<span class="token punctuation">.</span>Val <span class="token operator">&lt;=</span> start <span class="token operator">||</span> root<span class="token punctuation">.</span>Val <span class="token operator">&gt;=</span> end <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">jud</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> root<span class="token punctuation">.</span>Val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">jud</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> end<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、avl-二叉平衡搜索树" tabindex="-1"><a class="header-anchor" href="#三、avl-二叉平衡搜索树"><span>三、AVL - 二叉平衡搜索树</span></a></h2><p>在二叉树的基础上，满足平衡性</p><blockquote><p>平衡性：在某些情况下，二叉搜索树可能退化成类似链表的情况，为了避免这种情况引入平衡性。平衡性使用<code>平衡因子</code>来体现，平衡因子 = <code>|h(ls) - h(rs)|</code>，即左右子树的高度差不能超过 1</p></blockquote><table><thead><tr><th>树类型</th><th>最坏情况下的时间复杂度</th><th>插入、删除、查找</th></tr></thead><tbody><tr><td>二叉搜索树</td><td><code>O(n)</code>(当整棵树只有左节点或者只有右节点的情况)</td><td><code>O(logn)</code></td></tr><tr><td>平衡二叉搜索树</td><td><code>O(logn)</code></td><td>效率更高(都为<code>O(logn)</code>)</td></tr></tbody></table><blockquote><p>空树：空树也是一棵 AVL 树</p></blockquote><h3 id="节点高度、平衡因子" tabindex="-1"><a class="header-anchor" href="#节点高度、平衡因子"><span>节点高度、平衡因子</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> treeNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>  </span>
<span class="line">	val    <span class="token builtin">int</span>  </span>
<span class="line">	height <span class="token builtin">int</span> <span class="token comment">// 节点高度  </span></span>
<span class="line">	left   <span class="token operator">*</span>treeNode  </span>
<span class="line">	right  <span class="token operator">*</span>treeNode  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>节点高度</strong> 表示节点到最远叶子节点的距离（也就是边的数量）</li><li>叶子节点的高度 = 0</li><li>空节点的高度 = -1</li></ul><p><code>获取节点高度</code> <code>更新节点高度</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>avlTree<span class="token punctuation">)</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node <span class="token operator">*</span>treeNode<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>  </span>
<span class="line">	<span class="token comment">// 空节点高度为 -1   if node == nil {  </span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token keyword">return</span> node<span class="token punctuation">.</span>height  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>avlTree<span class="token punctuation">)</span> <span class="token function">updateHeight</span><span class="token punctuation">(</span>node <span class="token operator">*</span>treeNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">	<span class="token comment">// 节点高度等于最高子树的高度 + 1   </span></span>
<span class="line">	t<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>获取节点平衡因子</code></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// balanceFactor 获取平衡因子  </span></span>
<span class="line"><span class="token comment">// 设平衡因子为 f，平衡二叉树的平衡因子需满足：-1 &lt;= f &lt;= 1  </span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>avlTree<span class="token punctuation">)</span> <span class="token function">balanceFactor</span><span class="token punctuation">(</span>node <span class="token operator">*</span>treeNode<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>  </span>
<span class="line">	<span class="token comment">// 空节点的平衡因子为 0   </span></span>
<span class="line">	<span class="token keyword">if</span> node <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">		<span class="token keyword">return</span> <span class="token number">0</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token comment">// 节点平衡因子 = 左子树高度 - 右子树高度  </span></span>
<span class="line">	<span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四种旋转类型" tabindex="-1"><a class="header-anchor" href="#四种旋转类型"><span>四种旋转类型</span></a></h3><p>AVL 的特点就在于旋转（Roration），通过旋转可以让二叉树不失衡，根据节点的失衡情况，可以将分为四种旋转方式：<code>左旋</code>、<code>右旋</code>、<code>先左旋再右旋</code>、<code>先右旋再左旋</code></p><h4 id="左旋" tabindex="-1"><a class="header-anchor" href="#左旋"><span>左旋</span></a></h4><p>具体图示分析与右旋类似</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>avlTree<span class="token punctuation">)</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node <span class="token operator">*</span>treeNode<span class="token punctuation">)</span> <span class="token operator">*</span>treeNode  <span class="token punctuation">{</span>  </span>
<span class="line">	child <span class="token operator">:=</span> node<span class="token punctuation">.</span>right</span>
<span class="line">	<span class="token comment">// 消除碰撞，执行旋转  </span></span>
<span class="line">	node<span class="token punctuation">.</span>right <span class="token operator">=</span> child<span class="token punctuation">.</span>left  </span>
<span class="line">	child<span class="token punctuation">.</span>left <span class="token operator">=</span> node  </span>
<span class="line">	<span class="token comment">// 更新节点高度  </span></span>
<span class="line">	t<span class="token punctuation">.</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">	t<span class="token punctuation">.</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>  </span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">return</span> child  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="右旋" tabindex="-1"><a class="header-anchor" href="#右旋"><span>右旋</span></a></h4><ul><li>step 1</li></ul><p><img src="`+u+'" alt="图 5"></p><ul><li>step 2</li></ul><p>添加节点之后<strong>失衡</strong></p><p><img src="'+r+'" alt="图 6"></p><ul><li>step 3</li></ul><p>聚焦失衡的子树</p><p><img src="'+d+'" alt="图 7"></p><ul><li>step 4</li></ul><p><img src="'+k+'" alt="图 8"></p><p>碰撞：这里的 <code>child</code> 节点是没有右节点的，因此 <code>node</code> 节点的右旋过程是顺利的。在右旋操作中，如果 <code>child</code> 存在右节点，是会产生<strong>碰撞</strong>（碰撞只是为了个人方便记住存在这种情况引入的一个概念）的，那么在旋转之前，就必须<strong>消除碰撞</strong>：让 <code>grandchild</code> 作为 <code>node</code> 的左节点</p><p>一个有碰撞的例子：</p><p><img src="'+v+'" alt="图 9"></p><ul><li>step 5</li></ul><p><img src="'+m+`" alt="图 10"></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 右旋，返回平衡子树的根节点  </span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>avlTree<span class="token punctuation">)</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node <span class="token operator">*</span>treeNode<span class="token punctuation">)</span> <span class="token operator">*</span>treeNode <span class="token punctuation">{</span>  </span>
<span class="line">	child <span class="token operator">:=</span> node<span class="token punctuation">.</span>left  </span>
<span class="line">	<span class="token comment">// 消除碰撞，执行旋转  </span></span>
<span class="line">	node<span class="token punctuation">.</span>left <span class="token operator">=</span> child<span class="token punctuation">.</span>right  </span>
<span class="line">	child<span class="token punctuation">.</span>right <span class="token operator">=</span> node  </span>
<span class="line">	<span class="token comment">// 更新节点高度  </span></span>
<span class="line">	t<span class="token punctuation">.</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">	t<span class="token punctuation">.</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>  </span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">return</span> child  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="先左旋后右旋" tabindex="-1"><a class="header-anchor" href="#先左旋后右旋"><span>先左旋后右旋</span></a></h4><p>下面是同样的一颗 AVL 树，如果新节点添加在最左叶子节点的左节点，是能够通过一次右旋操作恢复平衡的，但是如果新节点<strong>添加在最左叶子节点的右节点</strong>，需要先通过一次<code>左旋</code>（这次左旋是不会产生碰撞的）达到类似于新节点是添加在最左边的效果，然后就能通过上面提到的<code>右旋</code>操作来恢复平衡</p><p><img src="`+b+'" alt="图 11"></p><h4 id="先右旋后左旋" tabindex="-1"><a class="header-anchor" href="#先右旋后左旋"><span>先右旋后左旋</span></a></h4><p>相当于「先左旋后右旋」的镜像操作</p><h4 id="「旋转」总结" tabindex="-1"><a class="header-anchor" href="#「旋转」总结"><span>「旋转」总结</span></a></h4><p><img src="'+h+`" alt="图 12"></p><p>设平衡因子为 f</p><ul><li>左偏树：f &gt; 1</li><li>右偏树：f &lt; -1</li></ul><p>我们可以通过分别判断 node 和 child 的平衡因子来选择执行哪种旋转操作</p><table><thead><tr><th style="text-align:center;">失衡节点的 f</th><th style="text-align:center;">子节点的 f</th><th style="text-align:center;">操作</th></tr></thead><tbody><tr><td style="text-align:center;">&gt; 1</td><td style="text-align:center;">&gt;= 0</td><td style="text-align:center;">右旋</td></tr><tr><td style="text-align:center;">&gt; 1</td><td style="text-align:center;">&lt; 0</td><td style="text-align:center;">先左旋后右旋</td></tr><tr><td style="text-align:center;">&lt; -1</td><td style="text-align:center;">&lt;= 0</td><td style="text-align:center;">左旋</td></tr><tr><td style="text-align:center;">&lt; -1</td><td style="text-align:center;">&gt; 0</td><td style="text-align:center;">先右旋后左旋</td></tr></tbody></table><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>avlTree<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>node <span class="token operator">*</span>treeNode<span class="token punctuation">)</span> <span class="token operator">*</span>treeNode <span class="token punctuation">{</span>  </span>
<span class="line">	<span class="token comment">// 失衡节点的平衡因子  </span></span>
<span class="line">	bf <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">balanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token keyword">if</span> bf <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>  </span>
<span class="line">		<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">balanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>  </span>
<span class="line">			<span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">			<span class="token comment">// 先左旋，后右旋  </span></span>
<span class="line">			node<span class="token punctuation">.</span>left <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>  </span>
<span class="line">			<span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">		<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> bf <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>  </span>
<span class="line">		<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">balanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>  </span>
<span class="line">			<span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">			<span class="token comment">// 先右旋，后左旋  </span></span>
<span class="line">			node<span class="token punctuation">.</span>right <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  </span>
<span class="line">			<span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">		<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token comment">// 已经是平衡状态  </span></span>
<span class="line">	<span class="token keyword">return</span> node  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入节点" tabindex="-1"><a class="header-anchor" href="#插入节点"><span>插入节点</span></a></h3><p>平衡二叉搜索树在节点插入之后要维持树的平衡，从插入的节点开始，需要 <strong><code>自底向上执行旋转操作，使所有失衡节点恢复平衡</code></strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>avlTree<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">   	t<span class="token punctuation">.</span>root <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">insertHelper</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>root<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>avlTree<span class="token punctuation">)</span> <span class="token function">insertHelper</span><span class="token punctuation">(</span>node <span class="token operator">*</span>treeNode<span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>treeNode <span class="token punctuation">{</span>  </span>
<span class="line">	<span class="token keyword">if</span> node <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">		<span class="token keyword">return</span> <span class="token operator">&amp;</span>treeNode<span class="token punctuation">{</span>  </span>
<span class="line">			val<span class="token punctuation">:</span> val<span class="token punctuation">,</span>  </span>
<span class="line">		<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	</span>
<span class="line">	<span class="token comment">/* 1. 插入 */</span>   </span>
<span class="line">	<span class="token keyword">if</span> val <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>val <span class="token punctuation">{</span>  </span>
<span class="line">		node<span class="token punctuation">.</span>left <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">insertHelper</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> val <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>val <span class="token punctuation">{</span>  </span>
<span class="line">		node<span class="token punctuation">.</span>right <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">insertHelper</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">		<span class="token comment">// 重复节点不插入  </span></span>
<span class="line">		<span class="token keyword">return</span> node  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 更新节点高度  </span></span>
<span class="line">	t<span class="token punctuation">.</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token comment">/* 2.执行旋转，恢复平衡 */</span>   </span>
<span class="line">	node <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token keyword">return</span> node  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除节点-1" tabindex="-1"><a class="header-anchor" href="#删除节点-1"><span>删除节点</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>avlTree<span class="token punctuation">)</span> <span class="token function">remove</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">   	t<span class="token punctuation">.</span><span class="token function">removeHelper</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>root<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>avlTree<span class="token punctuation">)</span> <span class="token function">removeHelper</span><span class="token punctuation">(</span>node <span class="token operator">*</span>treeNode<span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>treeNode <span class="token punctuation">{</span>  </span>
<span class="line">	<span class="token keyword">if</span> node <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">		<span class="token keyword">return</span> <span class="token boolean">nil</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">if</span> val <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>val <span class="token punctuation">{</span>  </span>
<span class="line">		node<span class="token punctuation">.</span>left <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">removeHelper</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> val <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>val <span class="token punctuation">{</span>  </span>
<span class="line">		node<span class="token punctuation">.</span>right <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">removeHelper</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">		<span class="token keyword">if</span> node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">			child <span class="token operator">:=</span> node<span class="token punctuation">.</span>left  </span>
<span class="line">			<span class="token keyword">if</span> node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">				child <span class="token operator">=</span> node<span class="token punctuation">.</span>right  </span>
<span class="line">			<span class="token punctuation">}</span>  </span>
<span class="line">	</span>
<span class="line">			<span class="token keyword">if</span> child <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">				<span class="token comment">// 没有子树，直接删除节点即可  </span></span>
<span class="line">				<span class="token keyword">return</span> <span class="token boolean">nil</span>  </span>
<span class="line">			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">				<span class="token comment">// 有至多一个节点，返回该节点  </span></span>
<span class="line">				<span class="token keyword">return</span> child  </span>
<span class="line">			<span class="token punctuation">}</span>  </span>
<span class="line">		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">			<span class="token comment">// 子节点的数量为 2，删除当前节点的后继节点，并用后继节点的值替换当前节点  </span></span>
<span class="line">			tmp <span class="token operator">:=</span> node<span class="token punctuation">.</span>right  </span>
<span class="line">			<span class="token keyword">for</span> tmp<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">				tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>left  </span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">			<span class="token comment">// 递归删除这个后继节点  </span></span>
<span class="line">			node<span class="token punctuation">.</span>right <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">removeHelper</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>val<span class="token punctuation">)</span>  </span>
<span class="line">			<span class="token comment">// 替换当前节点  </span></span>
<span class="line">			node<span class="token punctuation">.</span>val <span class="token operator">=</span> tmp<span class="token punctuation">.</span>val  </span>
<span class="line">		<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 更新节点高度  </span></span>
<span class="line">	t<span class="token punctuation">.</span><span class="token function">updateHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token comment">/* 执行旋转，保持平衡 */</span>   </span>
<span class="line">	node <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token keyword">return</span> node  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,132)]))}const x=s(g,[["render",f],["__file","shu.html.vue"]]),N=JSON.parse('{"path":"/docs/algorithm/shu.html","title":"树","lang":"en-US","frontmatter":{"title":"树","date":"2024/11/19"},"headers":[{"level":2,"title":"一、树的四种遍历","slug":"一、树的四种遍历","link":"#一、树的四种遍历","children":[{"level":3,"title":"前序","slug":"前序","link":"#前序","children":[]},{"level":3,"title":"中序","slug":"中序","link":"#中序","children":[]},{"level":3,"title":"后序","slug":"后序","link":"#后序","children":[]},{"level":3,"title":"层序","slug":"层序","link":"#层序","children":[]},{"level":3,"title":"四种遍历的时间、空间复杂度","slug":"四种遍历的时间、空间复杂度","link":"#四种遍历的时间、空间复杂度","children":[]},{"level":3,"title":"一些常见问题","slug":"一些常见问题","link":"#一些常见问题","children":[]}]},{"level":2,"title":"二、二叉搜索树","slug":"二、二叉搜索树","link":"#二、二叉搜索树","children":[{"level":3,"title":"添加节点","slug":"添加节点","link":"#添加节点","children":[]},{"level":3,"title":"删除节点","slug":"删除节点","link":"#删除节点","children":[]},{"level":3,"title":"构建","slug":"构建","link":"#构建","children":[]},{"level":3,"title":"判断是否是二叉搜索树","slug":"判断是否是二叉搜索树","link":"#判断是否是二叉搜索树","children":[]}]},{"level":2,"title":"三、AVL - 二叉平衡搜索树","slug":"三、avl-二叉平衡搜索树","link":"#三、avl-二叉平衡搜索树","children":[{"level":3,"title":"节点高度、平衡因子","slug":"节点高度、平衡因子","link":"#节点高度、平衡因子","children":[]},{"level":3,"title":"四种旋转类型","slug":"四种旋转类型","link":"#四种旋转类型","children":[]},{"level":3,"title":"插入节点","slug":"插入节点","link":"#插入节点","children":[]},{"level":3,"title":"删除节点","slug":"删除节点-1","link":"#删除节点-1","children":[]}]}],"git":{"createdTime":1739435258000,"updatedTime":1739435258000,"contributors":[{"name":"洪惠强","email":"904566722@qq.com","commits":1}]},"filePathRelative":"docs/algorithm/树.md"}');export{x as comp,N as data};

import{_ as s,c as a,a as p,o as t}from"./app-BDAgxtHV.js";const e="/assets/20240425-163951345-D7VN0Sbw.png",c="/assets/20240425-163956851-Cj5N5j-i.png",o="/assets/20240425-164003005-DJ20FAZA.png",l="/assets/20240425-164009799-DUcnHCUt.png",i="/assets/20240425-164015578-DqzrB-F1.png",u="/assets/20240425-164022007-ByLKta8b.png",k="/assets/20240425-164036807-8fvdH4Go.png",r="/assets/20240425-164044119-uknU47jn.png",d={};function v(m,n){return t(),a("div",null,n[0]||(n[0]=[p('<h1 id="图" tabindex="-1"><a class="header-anchor" href="#图"><span>图</span></a></h1><h2 id="图-1" tabindex="-1"><a class="header-anchor" href="#图-1"><span>图</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>定义：G = (V, E)</p><p><img src="'+e+'" alt="图 0"></p><p>图的分类</p><ul><li><p>边是否有方向</p><p><img src="'+c+'" alt="图 1"></p></li><li><p>是否有环</p><p><img src="'+o+'" alt="图 2"></p></li><li><p>连通、非连通</p><p><img src="'+l+'" alt="图 3"></p></li><li><p>边是否有权重</p><p><img src="'+i+'" alt="图 4"></p></li></ul><h3 id="表示" tabindex="-1"><a class="header-anchor" href="#表示"><span>表示</span></a></h3><ul><li>顺序</li><li>链式</li></ul><p>一个无向图的例子，展示如何用「邻接矩阵」和「邻接表」来表示一个图：</p><p><img src="'+u+`" alt="图 5"></p><p>邻接矩阵中保存着很多不存在的边，由于二维数组的连续性，会<strong>浪费很多空间，但是查询速度快 O(1)</strong>；在邻接表中，采用了一个数组来保存图的所有点，每个元素扩展成一个链表，只保存存在的边，<strong>节省空间，但是查询效率 O(n)</strong>，可以通过一些手段来优化这个链表，比如将链表转化为 AVL 或者 红黑树，查询效率能够优化到 O(logn)，或者采用哈希表，再将时间复杂度降至 O(1)</p><p>使用 map 实现无向图</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> vertex <span class="token keyword">struct</span> <span class="token punctuation">{</span>  </span>
<span class="line">    val <span class="token builtin">int</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token comment">/* 基于邻接表实现的无向图 */</span></span>
<span class="line"><span class="token keyword">type</span> graphAdjMp <span class="token keyword">struct</span> <span class="token punctuation">{</span>  </span>
<span class="line">    adjMp <span class="token keyword">map</span><span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>graphAdjMp<span class="token punctuation">)</span> <span class="token function">addVertex</span><span class="token punctuation">(</span>v vertex<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token comment">// 该顶点已经存在，无需重复加入  </span></span>
<span class="line">        <span class="token keyword">return</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token comment">// 新加一个节点，以及初始化一个链表  </span></span>
<span class="line">    g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>graphAdjMp<span class="token punctuation">)</span> <span class="token function">deleteVertex</span><span class="token punctuation">(</span>v vertex<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token comment">// 节点是不存在的  </span></span>
<span class="line">        <span class="token keyword">return</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token comment">/* 1.删除顶点 */</span>   </span>
<span class="line">    <span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>adjMp<span class="token punctuation">,</span> v<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token comment">/* 2.删除其他顶点中与之存在的关联 */</span>   </span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> rt <span class="token operator">:=</span> <span class="token keyword">range</span> g<span class="token punctuation">.</span>adjMp <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token function">delete</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> v<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>graphAdjMp<span class="token punctuation">)</span> <span class="token function">addEdge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2 vertex<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> ok1 <span class="token operator">:=</span> g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v1<span class="token punctuation">]</span>  </span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> ok2 <span class="token operator">:=</span> g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v2<span class="token punctuation">]</span>  </span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>ok1 <span class="token operator">||</span> <span class="token operator">!</span>ok2 <span class="token operator">||</span> v1 <span class="token operator">==</span> v2 <span class="token punctuation">{</span>  </span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;add edge error&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  </span>
<span class="line">    g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>graphAdjMp<span class="token punctuation">)</span> <span class="token function">deleteEdge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2 vertex<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> ok1 <span class="token operator">:=</span> g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v1<span class="token punctuation">]</span>  </span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> ok2 <span class="token operator">:=</span> g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v2<span class="token punctuation">]</span>  </span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>ok1 <span class="token operator">||</span> <span class="token operator">!</span>ok2 <span class="token operator">||</span> v1 <span class="token operator">==</span> v2 <span class="token punctuation">{</span>  </span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;delete edge error&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// newGraphAdjMp 使用边来初始化一个图  </span></span>
<span class="line"><span class="token comment">// edges 的形式应该是 [(v1,v2),(v1,v3)...]</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">newGraphAdjMp</span><span class="token punctuation">(</span>edges <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>vertex<span class="token punctuation">)</span> <span class="token operator">*</span>graphAdjMp <span class="token punctuation">{</span>  </span>
<span class="line">    g <span class="token operator">:=</span> <span class="token operator">&amp;</span>graphAdjMp<span class="token punctuation">{</span>  </span>
<span class="line">        adjMp<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> edges <span class="token punctuation">{</span>  </span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  </span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  </span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">return</span> g  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>graphAdjMp<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> g<span class="token punctuation">.</span>adjMp <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;graph is nil&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token keyword">for</span> vt<span class="token punctuation">,</span> toMp <span class="token operator">:=</span> <span class="token keyword">range</span> g<span class="token punctuation">.</span>adjMp <span class="token punctuation">{</span>  </span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;vertex#&quot;</span><span class="token punctuation">,</span> vt<span class="token punctuation">,</span> <span class="token string">&quot;have edge: &quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token keyword">for</span> toVt <span class="token operator">:=</span> <span class="token keyword">range</span> toMp <span class="token punctuation">{</span>  </span>
<span class="line">            fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> vt<span class="token punctuation">.</span>val<span class="token punctuation">,</span> toVt<span class="token punctuation">.</span>val<span class="token punctuation">,</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图的遍历" tabindex="-1"><a class="header-anchor" href="#图的遍历"><span>图的遍历</span></a></h3><h4 id="深度优先-dfs" tabindex="-1"><a class="header-anchor" href="#深度优先-dfs"><span>深度优先（DFS）</span></a></h4><p><img src="`+k+`" alt="图 6"></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>graphAdjMp<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>startVt vertex<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>vertex <span class="token punctuation">{</span>  </span>
<span class="line">	visited <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token keyword">var</span> visitRst <span class="token punctuation">[</span><span class="token punctuation">]</span>vertex  </span>
<span class="line">	g<span class="token punctuation">.</span><span class="token function">dfsHelper</span><span class="token punctuation">(</span>startVt<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> <span class="token operator">&amp;</span>visitRst<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token keyword">return</span> visitRst  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>graphAdjMp<span class="token punctuation">)</span> <span class="token function">dfsHelper</span><span class="token punctuation">(</span>startVt vertex<span class="token punctuation">,</span> visited <span class="token keyword">map</span><span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> visitRst <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>vertex<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  </span>
<span class="line">	<span class="token operator">*</span>visitRst <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>visitRst<span class="token punctuation">,</span> startVt<span class="token punctuation">)</span>  </span>
<span class="line">	visited<span class="token punctuation">[</span>startVt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token keyword">for</span> toVt <span class="token operator">:=</span> <span class="token keyword">range</span> g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>startVt<span class="token punctuation">]</span> <span class="token punctuation">{</span>  </span>
<span class="line">		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> visited<span class="token punctuation">[</span>toVt<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  </span>
<span class="line">			<span class="token keyword">continue</span>  </span>
<span class="line">		<span class="token punctuation">}</span>  </span>
<span class="line">	</span>
<span class="line">		g<span class="token punctuation">.</span><span class="token function">dfsHelper</span><span class="token punctuation">(</span>toVt<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> visitRst<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="广度优先-bfs" tabindex="-1"><a class="header-anchor" href="#广度优先-bfs"><span>广度优先（BFS）</span></a></h4><p><img src="`+r+`" alt="图 7"></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>graphAdjMp<span class="token punctuation">)</span> <span class="token function">bfs</span><span class="token punctuation">(</span>startVt vertex<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>vertex <span class="token punctuation">{</span>  </span>
<span class="line">	<span class="token keyword">if</span> g<span class="token punctuation">.</span>adjMp <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;graph is nil&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">var</span> queue <span class="token punctuation">[</span><span class="token punctuation">]</span>vertex  </span>
<span class="line">	visited <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token keyword">var</span> visitRst <span class="token punctuation">[</span><span class="token punctuation">]</span>vertex  </span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// visitRst 用来存储访问结果  </span></span>
<span class="line">	visitRst <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>visitRst<span class="token punctuation">,</span> startVt<span class="token punctuation">)</span>  </span>
<span class="line">	<span class="token comment">// 标记已经访问  </span></span>
<span class="line">	visited<span class="token punctuation">[</span>startVt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  </span>
<span class="line">	queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> startVt<span class="token punctuation">)</span>  </span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>  </span>
<span class="line">		cur <span class="token operator">:=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  </span>
<span class="line">		queue <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  </span>
<span class="line">		<span class="token comment">// 遍历相邻节点，如果还没访问，就访问，并加入队列  </span></span>
<span class="line">		<span class="token keyword">for</span> toVt<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> g<span class="token punctuation">.</span>adjMp<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token punctuation">{</span>  </span>
<span class="line">			<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> visited<span class="token punctuation">[</span>toVt<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  </span>
<span class="line">				<span class="token comment">// 节点已经访问过，跳过  </span></span>
<span class="line">				<span class="token keyword">continue</span>  </span>
<span class="line">			<span class="token punctuation">}</span>  </span>
<span class="line">	</span>
<span class="line">			visitRst <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>visitRst<span class="token punctuation">,</span> toVt<span class="token punctuation">)</span>  </span>
<span class="line">			visited<span class="token punctuation">[</span>toVt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  </span>
<span class="line">			queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> toVt<span class="token punctuation">)</span>  </span>
<span class="line">		<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token punctuation">}</span>  </span>
<span class="line">	<span class="token keyword">return</span> visitRst  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度，所有的节点都会入队列一次，时间 O(|V|)，每条边都会遍历两次，时间 O(2|E|)，总的时间复杂度 O(|V|+|E|)</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><ol><li>https://www.hello-algo.com/chapter_graph/graph_traversal/#932</li></ol>`,24)]))}const g=s(d,[["render",v],["__file","tu.html.vue"]]),f=JSON.parse('{"path":"/docs/algorithm/tu.html","title":"图","lang":"en-US","frontmatter":{"title":"图","date":"2024/11/19"},"headers":[{"level":2,"title":"图","slug":"图-1","link":"#图-1","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"表示","slug":"表示","link":"#表示","children":[]},{"level":3,"title":"图的遍历","slug":"图的遍历","link":"#图的遍历","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1739435258000,"updatedTime":1739435258000,"contributors":[{"name":"洪惠强","email":"904566722@qq.com","commits":1}]},"filePathRelative":"docs/algorithm/图.md"}');export{g as comp,f as data};
